Forecasting Temperature with LSTM Neural Networks
Predicting Future Temperatures 🌡️  with LSTM Networks 📈
In time series forecasting, we want to answer this simple question:

"Given the last few observations, what comes next?"

For this project, I used a Long Short-Term Memory (LSTM) neural network to predict daily minimum temperatures. Why LSTM? Because it excels at learning patterns over time — something traditional feedforward models just can’t do.

🧠 How LSTM Works
LSTM is a type of Recurrent Neural Network (RNN) designed to handle sequential data like sensor logs, stock prices, or weather readings.

An LSTM remembers long-term trends, it selectively forgets irrelevant patterns and it decides what to pass forward using gates.

Think of it as a network with a built-in memory cell. At each time step:
-It sees the new input (e.g., today’s temperature)
-It updates its internal memory based on what matters
-It uses that memory to predict what’s next (e.g., tomorrow’s temperature)

------------------------------------------------------------------------

Example: Sequence to Prediction
Input to the LSTM:
[21.4, 22.0, 20.8, 19.6, 20.1, 20.9, 21.2, 22.3, 22.1, 21.0]  ← Past 10 days

Prediction:
[21.7]  ← Forecast for day 11
This is repeated for every point in the time series.

------------------------------------------------------------------------

Project Breakdown
- Dataset: Daily minimum temperatures (10 years)
- Input: Past 10 days → Output: Next day
- Model: nn.LSTM → nn.Linear
- Loss: nn.MSELoss()
- Optimizer: Adam
- Output: Actual vs Predicted plots + error analysis

------------------------------------------------------------------------
Key Takeaway
LSTMs are powerful for modeling time-dependent patterns — whether it’s weather, finance, or IoT.
Training on past temperature data helped the model learn seasonal fluctuations and local trends to generate meaningful forecasts.